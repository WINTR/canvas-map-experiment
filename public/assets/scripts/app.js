(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

/**
 * Map Canvas application bootstrapperr
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.7.14
 */
var App, CanvasView, MapEvent, MapView, View,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MapEvent = require('./events/MapEvent.coffee');

View = require('./supers/View.coffee');

MapView = require('./views/MapView.coffee');

CanvasView = require('./views/CanvasView.coffee');

App = (function(_super) {
  __extends(App, _super);

  App.prototype.mapView = null;

  App.prototype.canvasView = null;

  App.prototype.wageData = null;

  function App(options) {
    this.onMouseMove = __bind(this.onMouseMove, this);
    App.__super__.constructor.call(this, options);
    this.canvasView = new CanvasView({
      wageData: this.wageData
    });
    this.mapView = new MapView({
      $canvas: this.canvasView.$el,
      canvasUpdateMethod: this.canvasView.update
    });
    this.addEventListeners();
    this.mapView.render();
  }

  App.prototype.addEventListeners = function() {
    this.listenTo(this.mapView, MapEvent.INITIALIZED, this.onMapInitialized);
    this.listenTo(this.mapView, MapEvent.ZOOM_CHANGED, this.onMapZoomChanged);
    return this.listenTo(this.mapView, MapEvent.DRAG, this.onMapDrag);
  };

  App.prototype.onMapInitialized = function() {
    return this.canvasView.render();
  };

  App.prototype.onMapZoomChanged = function(zoom) {};

  App.prototype.onMapDrag = function() {
    return this.canvasView.onMapDrag();
  };

  App.prototype.onMouseMove = function(event) {
    return this.canvasView.onMouseMove({
      x: event.clientX,
      y: event.clienY
    });
  };

  return App;

})(View);

$(function() {
  return $.getJSON('assets/data/wages.json', function(wageData) {
    return new App({
      wageData: wageData
    });
  });
});


},{"./events/MapEvent.coffee":4,"./supers/View.coffee":5,"./views/CanvasView.coffee":6,"./views/MapView.coffee":7}],2:[function(require,module,exports){

/**
 * Map app configuration options
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.7.14
 */
var MapConfig;

MapConfig = {
  ID: 'damassi.i68ol38a',
  INIT: {
    location: [40.09024, -95.712891],
    zoom: 5
  },
  CANVAS_SIZE: 300
};

module.exports = MapConfig;


},{}],3:[function(require,module,exports){

/**
 * Generic App-wide events
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.7.14
 */
var Event;

Event = {
  TEST: 'onTesttt'
};

module.exports = Event;


},{}],4:[function(require,module,exports){

/**
 * Leaflet-related Map events
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.7.14
 */
var MapEvent;

MapEvent = {
  DRAG_START: 'dragstart',
  DRAG: 'drag',
  DRAG_END: 'dragend',
  INITIALIZED: 'initialized',
  UPDATE: 'update',
  ZOOM_START: 'zoomstart',
  ZOOM_CHANGED: 'zoomend'
};

module.exports = MapEvent;


},{}],5:[function(require,module,exports){

/**
 * View superclass for shared functionality
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.7.14
 */
var View,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

View = (function(_super) {
  __extends(View, _super);

  function View() {
    return View.__super__.constructor.apply(this, arguments);
  }

  View.prototype.initialize = function(options) {
    return _.extend(this, _.defaults(options = options || this.defaults, this.defaults || {}));
  };

  return View;

})(Backbone.View);

module.exports = View;


},{}],6:[function(require,module,exports){

/**
 * Canvas Layer which represents data to be displayed on the MapView
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.7.14
 */
var CanvasView, Event, MapConfig, ThreeScene, View,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MapConfig = require('../config/MapConfig.coffee');

Event = require('../events/Event.coffee');

View = require('../supers/View.coffee');

ThreeScene = require('./ThreeScene.coffee');

CanvasView = (function(_super) {
  __extends(CanvasView, _super);

  function CanvasView() {
    this.onTick = __bind(this.onTick, this);
    this.update = __bind(this.update, this);
    return CanvasView.__super__.constructor.apply(this, arguments);
  }

  CanvasView.prototype.id = 'canvas-layer';

  CanvasView.prototype.render = function() {
    this.scenes = (_.range(this.wageData.length)).map(function(scene) {
      return scene = new ThreeScene;
    });
    this.scenes.forEach((function(_this) {
      return function(scene) {
        return _this.$el.append(scene.render().$el);
      };
    })(this));
    return this.onTick();
  };

  CanvasView.prototype.update = function(canvasOverlay, params) {
    var left, top, _ref;
    _ref = this.$el.offset(), left = _ref.left, top = _ref.top;
    return this.wageData.forEach((function(_this) {
      return function(state, index) {
        var $el, x, y, _ref1;
        _ref1 = canvasOverlay._map.latLngToContainerPoint([state.latitude, state.longitude]), x = _ref1.x, y = _ref1.y;
        if (_this.scenes && index < _this.wageData.length) {
          $el = _this.scenes[index].$el;
          return TweenMax.to($el, .6, {
            x: x - left - (MapConfig.CANVAS_SIZE * .5),
            y: y - top - (MapConfig.CANVAS_SIZE * .5),
            ease: Expo.easeOut
          });
        }
      };
    })(this));
  };

  CanvasView.prototype.onTick = function(event) {
    this.scenes.forEach(function(scene) {
      return scene.tick();
    });
    return requestAnimationFrame(this.onTick);
  };

  CanvasView.prototype.onUpdateZoom = function(zoom) {
    return console.log(zoom);
  };

  CanvasView.prototype.onMapDrag = function() {
    return this.scenes.forEach((function(_this) {
      return function(scene, index) {
        var dist, offset;
        scene = _this.scenes[index];
        offset = scene.$el.offset();
        dist = {
          x: ((window.innerWidth * .5) - (offset.left + (MapConfig.CANVAS_SIZE * .5))) * .01,
          y: ((window.innerHeight * .5) - (offset.top + (MapConfig.CANVAS_SIZE * .5))) * .01
        };
        return scene.updateCameraAngle(dist.x, -dist.y);
      };
    })(this));
  };

  return CanvasView;

})(View);

module.exports = CanvasView;


},{"../config/MapConfig.coffee":2,"../events/Event.coffee":3,"../supers/View.coffee":5,"./ThreeScene.coffee":8}],7:[function(require,module,exports){

/**
 * MapBox map layer
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.7.14
 */
var CanvasView, Event, MapConfig, MapEvent, MapView, View,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MapConfig = require('../config/MapConfig.coffee');

Event = require('../events/Event.coffee');

MapEvent = require('../events/MapEvent.coffee');

CanvasView = require('./CanvasView.coffee');

View = require('../supers/View.coffee');

MapView = (function(_super) {
  __extends(MapView, _super);

  MapView.prototype.id = 'map';

  MapView.prototype.mapbox = null;

  MapView.prototype.mapLayer = null;

  MapView.prototype.$leafletPane = null;

  MapView.prototype.$canvas = null;

  function MapView(options) {
    this.onMapDrag = __bind(this.onMapDrag, this);
    this.onZoomChanged = __bind(this.onZoomChanged, this);
    MapView.__super__.constructor.call(this, options);
    this.mapbox = L.mapbox;
    this.map = this.mapbox.map;
  }

  MapView.prototype.render = function() {
    this.mapLayer = this.mapbox.map(this.id, MapConfig.ID).setView(MapConfig.INIT.location, MapConfig.INIT.zoom).addControl(this.mapbox.geocoderControl(MapConfig.ID));
    L.canvasOverlay().drawing(this.canvasUpdateMethod).addTo(this.mapLayer).redraw();
    this.insertCanvasLayer();
    return this.addEventListeners();
  };

  MapView.prototype.addEventListeners = function() {
    this.mapLayer.on(MapEvent.ZOOM_CHANGED, this.onZoomChanged);
    return this.mapLayer.on(MapEvent.DRAG, this.onMapDrag);
  };

  MapView.prototype.onZoomChanged = function(event) {
    return this.trigger(MapEvent.ZOOM_CHANGED, this.mapLayer.getZoom());
  };

  MapView.prototype.onMapDrag = function(event) {
    return this.trigger(MapEvent.DRAG);
  };

  MapView.prototype.insertCanvasLayer = function() {
    this.$leafletPane = $("#map > .leaflet-map-pane > .leaflet-objects-pane");
    this.$canvas.prependTo(this.$leafletPane);
    this.$canvas.css('z-index', 5);
    return this.trigger(MapEvent.INITIALIZED);
  };

  return MapView;

})(View);

module.exports = MapView;


},{"../config/MapConfig.coffee":2,"../events/Event.coffee":3,"../events/MapEvent.coffee":4,"../supers/View.coffee":5,"./CanvasView.coffee":6}],8:[function(require,module,exports){

/**
 * Individual Three.js Scenes
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.8.14
 */
var Event, MapConfig, ThreeScene, View,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MapConfig = require('../config/MapConfig.coffee');

Event = require('../events/Event.coffee');

View = require('../supers/View.coffee');

ThreeScene = (function(_super) {
  __extends(ThreeScene, _super);

  ThreeScene.prototype.className = 'scene';

  function ThreeScene(options) {
    ThreeScene.__super__.constructor.call(this, options);
    this.setupThreeJSRenderer();
  }

  ThreeScene.prototype.render = function() {
    var size;
    size = MapConfig.CANVAS_SIZE;
    _.defer((function(_this) {
      return function() {
        _this.renderer.setSize(size, size);
        return _this.$el.append(_this.renderer.domElement);
      };
    })(this));
    return this;
  };

  ThreeScene.prototype.tick = function() {
    this.cube.rotation.y += .1;
    return this.renderer.render(this.scene, this.camera);
  };

  ThreeScene.prototype.updateCameraAngle = function(x, y) {
    this.camera.position.x = x;
    return this.camera.position.y = y;
  };

  ThreeScene.prototype.setupThreeJSRenderer = function() {
    var cameraAttributes, hex, i, _i, _ref;
    cameraAttributes = {
      angle: 45,
      aspect: MapConfig.CANVAS_SIZE / MapConfig.CANVAS_SIZE,
      near: .1,
      far: 1000
    };
    this.scene = new THREE.Scene;
    this.camera = new THREE.PerspectiveCamera(cameraAttributes.angle, cameraAttributes.aspect, cameraAttributes.near, cameraAttributes.far);
    this.renderer = new THREE.CanvasRenderer({
      alpha: true
    });
    this.geometry = new THREE.BoxGeometry(2, 30, 2);
    for (i = _i = 0, _ref = this.geometry.faces.length - 1; _i <= _ref; i = _i += +2) {
      hex = Math.random() * 0xffffff;
      this.geometry.faces[i].color.setHex(hex);
      this.geometry.faces[i + 1].color.setHex(hex);
    }
    this.material = new THREE.MeshBasicMaterial({
      vertexColors: THREE.FaceColors,
      overdraw: 0.5
    });
    this.cube = new THREE.Mesh(this.geometry, this.material);
    this.renderer.setClearColor(0x000000, 0);
    this.camera.position.z = 50;
    this.scene.add(this.cube);
    this.cube.rotation.x = 20;
    return this.cube.rotation.y = 20;
  };

  return ThreeScene;

})(View);

module.exports = ThreeScene;


},{"../config/MapConfig.coffee":2,"../events/Event.coffee":3,"../supers/View.coffee":5}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvVXNlcnMvZGFtYXNzaS9TaXRlcy9XSU5UUi9jYW52YXMtbWFwLWV4cGVyaW1lbnQvbm9kZV9tb2R1bGVzL2dydW50LWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9Vc2Vycy9kYW1hc3NpL1NpdGVzL1dJTlRSL2NhbnZhcy1tYXAtZXhwZXJpbWVudC9zcmMvc2NyaXB0cy9hcHAuY29mZmVlIiwiL1VzZXJzL2RhbWFzc2kvU2l0ZXMvV0lOVFIvY2FudmFzLW1hcC1leHBlcmltZW50L3NyYy9zY3JpcHRzL2NvbmZpZy9NYXBDb25maWcuY29mZmVlIiwiL1VzZXJzL2RhbWFzc2kvU2l0ZXMvV0lOVFIvY2FudmFzLW1hcC1leHBlcmltZW50L3NyYy9zY3JpcHRzL2V2ZW50cy9FdmVudC5jb2ZmZWUiLCIvVXNlcnMvZGFtYXNzaS9TaXRlcy9XSU5UUi9jYW52YXMtbWFwLWV4cGVyaW1lbnQvc3JjL3NjcmlwdHMvZXZlbnRzL01hcEV2ZW50LmNvZmZlZSIsIi9Vc2Vycy9kYW1hc3NpL1NpdGVzL1dJTlRSL2NhbnZhcy1tYXAtZXhwZXJpbWVudC9zcmMvc2NyaXB0cy9zdXBlcnMvVmlldy5jb2ZmZWUiLCIvVXNlcnMvZGFtYXNzaS9TaXRlcy9XSU5UUi9jYW52YXMtbWFwLWV4cGVyaW1lbnQvc3JjL3NjcmlwdHMvdmlld3MvQ2FudmFzVmlldy5jb2ZmZWUiLCIvVXNlcnMvZGFtYXNzaS9TaXRlcy9XSU5UUi9jYW52YXMtbWFwLWV4cGVyaW1lbnQvc3JjL3NjcmlwdHMvdmlld3MvTWFwVmlldy5jb2ZmZWUiLCIvVXNlcnMvZGFtYXNzaS9TaXRlcy9XSU5UUi9jYW52YXMtbWFwLWV4cGVyaW1lbnQvc3JjL3NjcmlwdHMvdmlld3MvVGhyZWVTY2VuZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUFBOzs7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QUEsQ0F0Q3RCLENBQUE7O29CQUFBOztHQU5zQixLQVp6QixDQUFBOztBQUFBLE1BMkZNLENBQUMsT0FBUCxHQUFpQixVQTNGakIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiIyMjKlxuICogTWFwIENhbnZhcyBhcHBsaWNhdGlvbiBib290c3RyYXBwZXJyXG4gKlxuICogQGF1dGhvciBDaHJpc3RvcGhlciBQYXBwYXMgPGNocmlzQHdpbnRyLnVzPlxuICogQGRhdGUgICA1LjcuMTRcbiMjI1xuXG5NYXBFdmVudCAgID0gcmVxdWlyZSAnLi9ldmVudHMvTWFwRXZlbnQuY29mZmVlJ1xuVmlldyAgICAgICA9IHJlcXVpcmUgJy4vc3VwZXJzL1ZpZXcuY29mZmVlJ1xuTWFwVmlldyAgICA9IHJlcXVpcmUgJy4vdmlld3MvTWFwVmlldy5jb2ZmZWUnXG5DYW52YXNWaWV3ID0gcmVxdWlyZSAnLi92aWV3cy9DYW52YXNWaWV3LmNvZmZlZSdcblxuXG5jbGFzcyBBcHAgZXh0ZW5kcyBWaWV3XG5cblxuICAgIyBNYXBCb3ggbWFwIHZpZXcgY29udGFpbmluZyBhbGwgbWFwIHJlbGF0ZWQgZnVuY3Rpb25hbGl0eVxuICAgIyBAdHlwZSB7TC5NYXBCb3h9XG5cbiAgIG1hcFZpZXc6IG51bGxcblxuXG4gICAjIENhbnZhcyB2aWV3IGNvbnRhaW5pbmcgYWxsIGNhbnZhcyByZWxhdGVkIGZ1bmN0aW9uYWxpdHlcbiAgICMgQHR5cGUge0NhbnZhc1ZpZXd9XG5cbiAgIGNhbnZhc1ZpZXc6IG51bGxcblxuXG4gICAjIEpTT04gRGF0YSBvZiB3YWdlcyBhbmQgbGF0LCBsbmcgYnkgc3RhdGVcbiAgICMgQHR5cGUge0FycmF5fVxuXG4gICB3YWdlRGF0YTogbnVsbFxuXG5cblxuXG4gICAjIEluaXRpYWxpemUgYXBwIGJ5IGNyZWF0aW5nIGEgY2FudmFzIHZpZXcgYW5kIGEgbWFwdmlld1xuXG4gICBjb25zdHJ1Y3RvcjogKG9wdGlvbnMpIC0+XG4gICAgICBzdXBlciBvcHRpb25zXG5cbiAgICAgIEBjYW52YXNWaWV3ID0gbmV3IENhbnZhc1ZpZXdcbiAgICAgICAgIHdhZ2VEYXRhOiBAd2FnZURhdGFcblxuICAgICAgQG1hcFZpZXcgPSBuZXcgTWFwVmlld1xuICAgICAgICAgJGNhbnZhczogQGNhbnZhc1ZpZXcuJGVsXG4gICAgICAgICBjYW52YXNVcGRhdGVNZXRob2Q6IEBjYW52YXNWaWV3LnVwZGF0ZVxuXG4gICAgICBAYWRkRXZlbnRMaXN0ZW5lcnMoKVxuICAgICAgQG1hcFZpZXcucmVuZGVyKClcblxuXG5cblxuXG4gICAjIEFkZCBhcHAtd2lkZSBldmVudCBsaXN0ZW5lcnNcblxuICAgYWRkRXZlbnRMaXN0ZW5lcnM6IC0+XG4gICAgICBAbGlzdGVuVG8gQG1hcFZpZXcsICAgIE1hcEV2ZW50LklOSVRJQUxJWkVELCAgQG9uTWFwSW5pdGlhbGl6ZWRcbiAgICAgIEBsaXN0ZW5UbyBAbWFwVmlldywgICAgTWFwRXZlbnQuWk9PTV9DSEFOR0VELCBAb25NYXBab29tQ2hhbmdlZFxuICAgICAgQGxpc3RlblRvIEBtYXBWaWV3LCAgICBNYXBFdmVudC5EUkFHLCAgICAgICAgIEBvbk1hcERyYWdcbiAgICAgICMkKHdpbmRvdykub24gICAgICAgICAgJ21vdXNlbW92ZScsICAgICAgICAgICAgQG9uTW91c2VNb3ZlXG5cblxuXG5cblxuICAgIyBFVkVOVCBIQU5ETEVSU1xuICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cblxuICAgIyBIYW5kbGVyIGZvciBtYXAgaW5pdGlhbGl6YXRpb24gZXZlbnRzLiAgUmVjZWl2ZWQgZnJvbSB0aGUgTWFwVmlldyB3aGljaFxuICAgIyBraWNrcyBvZmYgY2FudmFzIHJlbmRlcmluZyBhbmQgMy5qcyBpbnN0YW50aWF0aW9uXG5cbiAgIG9uTWFwSW5pdGlhbGl6ZWQ6IC0+XG4gICAgICBAY2FudmFzVmlldy5yZW5kZXIoKVxuXG5cblxuXG5cbiAgICMgSGFuZGxlciBmb3Igem9vbSBjaGFuZ2UgZXZlbnRzXG4gICAjIEBwYXJhbSB7TnVtYmVyfSB6b29tIFRoZSBjdXJyZW50IG1hcCB6b29tXG5cbiAgIG9uTWFwWm9vbUNoYW5nZWQ6ICh6b29tKSAtPlxuXG5cblxuXG5cbiAgIG9uTWFwRHJhZzogLT5cbiAgICAgIEBjYW52YXNWaWV3Lm9uTWFwRHJhZygpXG5cblxuXG5cblxuICAgb25Nb3VzZU1vdmU6IChldmVudCkgPT5cbiAgICAgIEBjYW52YXNWaWV3Lm9uTW91c2VNb3ZlXG4gICAgICAgICB4OiBldmVudC5jbGllbnRYXG4gICAgICAgICB5OiBldmVudC5jbGllbllcblxuXG5cblxuIyBLaWNrIG9mZiBBcHAgYW5kIGxvYWQgZXh0ZXJuYWwgd2FnZSBkYXRhXG5cbiQgLT5cbiAgICQuZ2V0SlNPTiAnYXNzZXRzL2RhdGEvd2FnZXMuanNvbicsICh3YWdlRGF0YSkgLT5cbiAgICAgIG5ldyBBcHBcbiAgICAgICAgIHdhZ2VEYXRhOiB3YWdlRGF0YVxuIiwiIyMjKlxuICogTWFwIGFwcCBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAqXG4gKiBAYXV0aG9yIENocmlzdG9waGVyIFBhcHBhcyA8Y2hyaXNAd2ludHIudXM+XG4gKiBAZGF0ZSAgIDUuNy4xNFxuIyMjXG5cblxuTWFwQ29uZmlnID1cblxuXG4gICAjIFVuaXF1ZSBpZGVudGlmaWVyIGZvciBNYXBCb3ggYXBwXG4gICAjIEB0eXBlIHtTdHJpbmd9XG5cbiAgIElEOiAnZGFtYXNzaS5pNjhvbDM4YSdcblxuXG4gICAjIE1hcCBsYW5kcyBvbiBTZWF0dGxlIGR1cmluZyBpbml0aWFsaXphdGlvblxuICAgIyBAdHlwZSB7QXJyYXl9XG5cbiAgIElOSVQ6XG4gICAgICBsb2NhdGlvbjogWzQwLjA5MDI0LCAtOTUuNzEyODkxXVxuICAgICAgem9vbTogNVxuXG5cbiAgICMgV2lkdGggb2YgZWFjaCBpbmRpdmlkdWFsIGNhbnZhcyBzcXVhcmVcbiAgICMgQHR5cGUge051bWJlcn1cblxuICAgQ0FOVkFTX1NJWkU6IDMwMFxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDb25maWciLCIjIyMqXG4gKiBHZW5lcmljIEFwcC13aWRlIGV2ZW50c1xuICpcbiAqIEBhdXRob3IgQ2hyaXN0b3BoZXIgUGFwcGFzIDxjaHJpc0B3aW50ci51cz5cbiAqIEBkYXRlICAgNS43LjE0XG4jIyNcblxuXG5FdmVudCA9XG5cbiAgIFRFU1Q6ICdvblRlc3R0dCdcblxuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50IiwiIyMjKlxuICogTGVhZmxldC1yZWxhdGVkIE1hcCBldmVudHNcbiAqXG4gKiBAYXV0aG9yIENocmlzdG9waGVyIFBhcHBhcyA8Y2hyaXNAd2ludHIudXM+XG4gKiBAZGF0ZSAgIDUuNy4xNFxuIyMjXG5cblxuTWFwRXZlbnQgPVxuXG4gICBEUkFHX1NUQVJUOiAgICAgICAnZHJhZ3N0YXJ0J1xuICAgRFJBRzogICAgICAgICAgICAgJ2RyYWcnXG4gICBEUkFHX0VORDogICAgICAgICAnZHJhZ2VuZCdcblxuICAgIyBUcmlnZ2VyZWQgb25jZSB0aGUgTWFwQm94IG1hcCBpcyBpbml0aWFsaXplZCBhbmQgcmVuZGVyZWQgdG8gdGhlIERPTVxuICAgIyBAdHlwZSB7U3RyaW5nfVxuXG4gICBJTklUSUFMSVpFRDogICAgICAnaW5pdGlhbGl6ZWQnXG4gICBVUERBVEU6ICAgICAgICAgICAndXBkYXRlJ1xuICAgWk9PTV9TVEFSVDogICAgICAgJ3pvb21zdGFydCdcbiAgIFpPT01fQ0hBTkdFRDogICAgICd6b29tZW5kJ1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTWFwRXZlbnQiLCIjIyMqXG4gKiBWaWV3IHN1cGVyY2xhc3MgZm9yIHNoYXJlZCBmdW5jdGlvbmFsaXR5XG4gKlxuICogQGF1dGhvciBDaHJpc3RvcGhlciBQYXBwYXMgPGNocmlzQHdpbnRyLnVzPlxuICogQGRhdGUgICA1LjcuMTRcbiMjI1xuXG5jbGFzcyBWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG5cbiAgICMgVmlldyBjb25zdHJ1Y3RvciB3aGljaCBhY2NlcHRzIHBhcmFtZXRlcnMgYW5kIG1lcmdlcyB0aGVtXG4gICAjIGludG8gdGhlIHZpZXcgcHJvdG90eXBlIGZvciBlYXN5IGFjY2Vzcy5cbiAgICMgQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcblxuICAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICAgICMgTWVyZ2UgcGFzc2VkIHByb3BzIG9yIGluc3RhbmNlIGRlZmF1bHRzXG4gICAgICBfLmV4dGVuZCBALCBfLmRlZmF1bHRzKCBvcHRpb25zID0gb3B0aW9ucyB8fCBAZGVmYXVsdHMsIEBkZWZhdWx0cyB8fCB7fSApXG5cblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3IiwiIyMjKlxuICogQ2FudmFzIExheWVyIHdoaWNoIHJlcHJlc2VudHMgZGF0YSB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIE1hcFZpZXdcbiAqXG4gKiBAYXV0aG9yIENocmlzdG9waGVyIFBhcHBhcyA8Y2hyaXNAd2ludHIudXM+XG4gKiBAZGF0ZSAgIDUuNy4xNFxuIyMjXG5cbk1hcENvbmZpZyAgPSByZXF1aXJlICcuLi9jb25maWcvTWFwQ29uZmlnLmNvZmZlZSdcbkV2ZW50ICAgICAgPSByZXF1aXJlICcuLi9ldmVudHMvRXZlbnQuY29mZmVlJ1xuVmlldyAgICAgICA9IHJlcXVpcmUgJy4uL3N1cGVycy9WaWV3LmNvZmZlZSdcblRocmVlU2NlbmUgPSByZXF1aXJlICcuL1RocmVlU2NlbmUuY29mZmVlJ1xuXG5cbmNsYXNzIENhbnZhc1ZpZXcgZXh0ZW5kcyBWaWV3XG5cblxuICAgIyBJRCBvZiBET00gY29udGFpbmVyIGZvciBjYW52YXMgbGF5ZXJcbiAgICMgQHR5cGUge1N0cmluZ31cblxuICAgaWQ6ICdjYW52YXMtbGF5ZXInXG5cblxuXG4gICAjIEluc3RhbnRpYXRlIFRocmVlLmpzIHNjZW5lcyBiYXNlZCB1cG9uIG51bWJlciBvZiBkYXRhcG9pbnRzIGluIHRoZSBKU09OXG5cbiAgIHJlbmRlcjogLT5cblxuICAgICAgQHNjZW5lcyA9IChfLnJhbmdlIEB3YWdlRGF0YS5sZW5ndGgpLm1hcCAoc2NlbmUpIC0+XG4gICAgICAgICBzY2VuZSA9IG5ldyBUaHJlZVNjZW5lXG5cbiAgICAgICMgQXBwZW5kIHRvIGRvbSBhbmQgc3RhcnQgdGlja2VyXG4gICAgICBAc2NlbmVzLmZvckVhY2ggKHNjZW5lKSA9PiBAJGVsLmFwcGVuZCBzY2VuZS5yZW5kZXIoKS4kZWxcbiAgICAgIEBvblRpY2soKVxuXG5cblxuXG4gICAjIFVwZGF0ZSB0aGUgY2FudmFzIGxheWVyIHdoZW5ldmVyIHRoZXJlIGlzIGEgem9vbSBhY3Rpb25cbiAgICMgQHBhcmFtIHtIVE1MRG9tRWxlbWVudH0gY2FudmFzT3ZlcmxheVxuICAgIyBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG5cbiAgIHVwZGF0ZTogKGNhbnZhc092ZXJsYXksIHBhcmFtcykgPT5cbiAgICAgIHtsZWZ0LCB0b3B9ID0gQCRlbC5vZmZzZXQoKVxuXG4gICAgICBAd2FnZURhdGEuZm9yRWFjaCAoc3RhdGUsIGluZGV4KSA9PlxuICAgICAgICAge3gsIHl9ID0gY2FudmFzT3ZlcmxheS5fbWFwLmxhdExuZ1RvQ29udGFpbmVyUG9pbnQgW3N0YXRlLmxhdGl0dWRlLCBzdGF0ZS5sb25naXR1ZGVdXG5cbiAgICAgICAgIGlmIEBzY2VuZXMgYW5kIGluZGV4IDwgQHdhZ2VEYXRhLmxlbmd0aFxuICAgICAgICAgICAgeyRlbH0gPSBAc2NlbmVzW2luZGV4XVxuXG4gICAgICAgICAgICBUd2Vlbk1heC50byAkZWwsIC42LFxuICAgICAgICAgICAgICAgeDogeCAtIGxlZnQgLSAoTWFwQ29uZmlnLkNBTlZBU19TSVpFICogLjUpXG4gICAgICAgICAgICAgICB5OiB5IC0gdG9wICAtIChNYXBDb25maWcuQ0FOVkFTX1NJWkUgKiAuNSlcbiAgICAgICAgICAgICAgIGVhc2U6IEV4cG8uZWFzZU91dFxuXG5cblxuXG5cbiAgICMgRVZFTlQgSEFORExFUlNcbiAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG5cbiAgICMgSGFuZGxlciBmb3IgVEhSRUUuanMgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGV2ZW50IGxvb3AuICBVcGRhdGVzIGVhY2hcbiAgICMgaW52aWRpdmlkdWFsIGNhbnZhcyBsYXllciBpbiBzY2VuZXMgYXJyYXlcblxuICAgb25UaWNrOiAoZXZlbnQpID0+XG4gICAgICBAc2NlbmVzLmZvckVhY2ggKHNjZW5lKSAtPiBzY2VuZS50aWNrKClcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSBAb25UaWNrXG5cblxuXG5cbiAgICMgUmVuZGVyIHRoZSB2aWV3IGxheWVyIGFuZCBiZWdpbiBUSFJFRS5qcyB0aWNrZXJcbiAgICMgQHB1YmxpY1xuXG4gICBvblVwZGF0ZVpvb206ICh6b29tKSAtPlxuICAgICAgY29uc29sZS5sb2cgem9vbVxuXG5cblxuXG5cbiAgIG9uTWFwRHJhZzogLT5cbiAgICAgIEBzY2VuZXMuZm9yRWFjaCAoc2NlbmUsIGluZGV4KSA9PlxuICAgICAgICAgc2NlbmUgID0gQHNjZW5lc1tpbmRleF1cbiAgICAgICAgIG9mZnNldCA9IHNjZW5lLiRlbC5vZmZzZXQoKVxuXG4gICAgICAgICAjIENvbXB1dGUgdGhlIGRpc3RhbmNlIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHdpbmRvdy4gIFVzZWQgdG8gY3JlYXRlXG4gICAgICAgICAjIHN3YXkgbXVsdGlwbGVzIGZvciBwZXJzcGVjdGl2ZSBjYW1lcmEgYW5nbGVcblxuICAgICAgICAgZGlzdCA9XG4gICAgICAgICAgICB4OiAoKHdpbmRvdy5pbm5lcldpZHRoICAqIC41KSAtIChvZmZzZXQubGVmdCArIChNYXBDb25maWcuQ0FOVkFTX1NJWkUgKiAuNSkpKSAqIC4wMVxuICAgICAgICAgICAgeTogKCh3aW5kb3cuaW5uZXJIZWlnaHQgKiAuNSkgLSAob2Zmc2V0LnRvcCAgKyAoTWFwQ29uZmlnLkNBTlZBU19TSVpFICogLjUpKSkgKiAuMDFcblxuICAgICAgICAgc2NlbmUudXBkYXRlQ2FtZXJhQW5nbGUoIGRpc3QueCwgLWRpc3QueSApXG5cblxuXG5cblxuXG5cblxuXG5cbm1vZHVsZS5leHBvcnRzID0gQ2FudmFzVmlldyIsIiMjIypcbiAqIE1hcEJveCBtYXAgbGF5ZXJcbiAqXG4gKiBAYXV0aG9yIENocmlzdG9waGVyIFBhcHBhcyA8Y2hyaXNAd2ludHIudXM+XG4gKiBAZGF0ZSAgIDUuNy4xNFxuIyMjXG5cbk1hcENvbmZpZyAgPSByZXF1aXJlICcuLi9jb25maWcvTWFwQ29uZmlnLmNvZmZlZSdcbkV2ZW50ICAgICAgPSByZXF1aXJlICcuLi9ldmVudHMvRXZlbnQuY29mZmVlJ1xuTWFwRXZlbnQgICA9IHJlcXVpcmUgJy4uL2V2ZW50cy9NYXBFdmVudC5jb2ZmZWUnXG5DYW52YXNWaWV3ID0gcmVxdWlyZSAnLi9DYW52YXNWaWV3LmNvZmZlZSdcblZpZXcgICAgICAgPSByZXF1aXJlICcuLi9zdXBlcnMvVmlldy5jb2ZmZWUnXG5cblxuY2xhc3MgTWFwVmlldyBleHRlbmRzIFZpZXdcblxuXG4gICAjIElEIG9mIHRoZSB2aWV3XG4gICAjIEB0eXBlIHtTdHJpbmd9XG5cbiAgIGlkOiAnbWFwJ1xuXG5cbiAgICMgUHJveHkgTC5tYXBib3ggbmFtZXNwYWNlIGZvciBlYXN5IGFjY2Vzc1xuICAgIyBAdHlwZSB7TC5tYXBib3h9XG5cbiAgIG1hcGJveDogbnVsbFxuXG5cbiAgICMgTWFwQm94IG1hcCBsYXllclxuICAgIyBAdHlwZSB7TC5NYXB9XG5cbiAgIG1hcExheWVyOiBudWxsXG5cblxuICAgIyBSZWYgdG8gdGhlIExlYWZsZXQgbGF5ZXIgdG8gaW5zZXJ0IG1hcCBiZWZvcmVcbiAgICMgQHR5cGUgeyR9XG5cbiAgICRsZWFmbGV0UGFuZTogbnVsbFxuXG5cbiAgICMgUmVmIHRvIHRoZSBjYW52YXMgRE9NIGVsZW1lbnRcbiAgICMgQHR5cGUge0wuTWFwfVxuXG4gICAkY2FudmFzOiBudWxsXG5cblxuXG4gICAjIEluaXRpYWxpemUgdGhlIE1hcExheWVyIGFuZCBraWNrIG9mZiBDYW52YXMgbGF5ZXIgcmVwb3NpdGlvbmluZ1xuICAgIyBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBEZWZhdWx0IG9wdGlvbnMgdG8gcGFzcyBpbnRvIHRoZSBhcHBcblxuICAgY29uc3RydWN0b3I6IChvcHRpb25zKSAtPlxuICAgICAgc3VwZXIgb3B0aW9uc1xuXG4gICAgICBAbWFwYm94ID0gTC5tYXBib3hcbiAgICAgIEBtYXAgICAgPSBAbWFwYm94Lm1hcFxuXG5cblxuICAgIyBSZW5kZXJzIHRoZSB2aWV3IGJ5IGNyZWF0aW5nIHRoZSBNYXAgbGF5ZXIgYW5kIGluc2VydGluZyB0aGVcbiAgICMgY2FudmFzIERPTSBsYXllciBpbnRvIExlYWZsZXQncyBoaWFyY2h5XG5cbiAgIHJlbmRlcjogLT5cbiAgICAgIEBtYXBMYXllciA9IEBtYXBib3gubWFwIEBpZCwgTWFwQ29uZmlnLklEXG4gICAgICAgICAuc2V0VmlldyAgICBNYXBDb25maWcuSU5JVC5sb2NhdGlvbiwgTWFwQ29uZmlnLklOSVQuem9vbVxuICAgICAgICAgLmFkZENvbnRyb2wgQG1hcGJveC5nZW9jb2RlckNvbnRyb2wgTWFwQ29uZmlnLklEXG5cbiAgICAgICMgQWRkIGEgY2FudmFzIG92ZXJsYXkgYW5kIHBhc3MgaW4gYW4gdXBkYXRlIG1ldGhvZFxuICAgICAgTC5jYW52YXNPdmVybGF5KClcbiAgICAgICAgIC5kcmF3aW5nIEBjYW52YXNVcGRhdGVNZXRob2RcbiAgICAgICAgIC5hZGRUbyBAbWFwTGF5ZXJcbiAgICAgICAgIC5yZWRyYXcoKVxuXG4gICAgICBAaW5zZXJ0Q2FudmFzTGF5ZXIoKVxuICAgICAgQGFkZEV2ZW50TGlzdGVuZXJzKClcblxuXG5cblxuICAgYWRkRXZlbnRMaXN0ZW5lcnM6IC0+XG4gICAgICBAbWFwTGF5ZXIub24gTWFwRXZlbnQuWk9PTV9DSEFOR0VELCBAb25ab29tQ2hhbmdlZFxuICAgICAgQG1hcExheWVyLm9uIE1hcEV2ZW50LkRSQUcsICAgICAgICAgQG9uTWFwRHJhZ1xuXG5cblxuXG5cblxuICAgIyBFVkVOVCBIQU5ETEVSU1xuICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbiAgICMgSGFuZGxlciBmb3Igem9vbSBjaGFuZ2UgZXZlbnRzXG4gICAjIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuXG4gICBvblpvb21DaGFuZ2VkOiAoZXZlbnQpID0+XG4gICAgICBAdHJpZ2dlciBNYXBFdmVudC5aT09NX0NIQU5HRUQsIEBtYXBMYXllci5nZXRab29tKClcblxuXG5cblxuXG4gICBvbk1hcERyYWc6IChldmVudCkgPT5cbiAgICAgIEB0cmlnZ2VyIE1hcEV2ZW50LkRSQUdcblxuXG5cblxuXG5cbiAgICMgUFJJVkFURSBNRVRIT0RTXG4gICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuICAgIyBNb3ZlcyB0aGUgY2FudmFzIGxheWVyIGludG8gdGhlIExlYWZsZXQgRE9NXG5cbiAgIGluc2VydENhbnZhc0xheWVyOiAtPlxuICAgICAgQCRsZWFmbGV0UGFuZSA9ICQgXCIjbWFwID4gLmxlYWZsZXQtbWFwLXBhbmUgPiAubGVhZmxldC1vYmplY3RzLXBhbmVcIlxuICAgICAgQCRjYW52YXMucHJlcGVuZFRvIEAkbGVhZmxldFBhbmVcbiAgICAgIEAkY2FudmFzLmNzcyAnei1pbmRleCcsIDVcblxuICAgICAgQHRyaWdnZXIgTWFwRXZlbnQuSU5JVElBTElaRURcblxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBNYXBWaWV3IiwiIyMjKlxuICogSW5kaXZpZHVhbCBUaHJlZS5qcyBTY2VuZXNcbiAqXG4gKiBAYXV0aG9yIENocmlzdG9waGVyIFBhcHBhcyA8Y2hyaXNAd2ludHIudXM+XG4gKiBAZGF0ZSAgIDUuOC4xNFxuIyMjXG5cbk1hcENvbmZpZyA9IHJlcXVpcmUgJy4uL2NvbmZpZy9NYXBDb25maWcuY29mZmVlJ1xuRXZlbnQgICAgID0gcmVxdWlyZSAnLi4vZXZlbnRzL0V2ZW50LmNvZmZlZSdcblZpZXcgICAgICA9IHJlcXVpcmUgJy4uL3N1cGVycy9WaWV3LmNvZmZlZSdcblxuXG5jbGFzcyBUaHJlZVNjZW5lIGV4dGVuZHMgVmlld1xuXG5cbiAgICMgQ2xhc3MgbmFtZSBvZiBET00gY29udGFpbmVyIGZvciBpbmRpdmlkdWFsIFRocmVlLmpzIHNjZW5lc1xuICAgIyBAdHlwZSB7U3RyaW5nfVxuXG4gICBjbGFzc05hbWU6ICdzY2VuZSdcblxuXG5cbiAgIGNvbnN0cnVjdG9yOiAob3B0aW9ucykgLT5cbiAgICAgIHN1cGVyIG9wdGlvbnNcblxuICAgICAgQHNldHVwVGhyZWVKU1JlbmRlcmVyKClcblxuXG5cblxuICAgcmVuZGVyOiAtPlxuICAgICAgc2l6ZSA9IE1hcENvbmZpZy5DQU5WQVNfU0laRVxuXG4gICAgICBfLmRlZmVyID0+XG4gICAgICAgICBAcmVuZGVyZXIuc2V0U2l6ZSBzaXplLCBzaXplXG4gICAgICAgICBAJGVsLmFwcGVuZCBAcmVuZGVyZXIuZG9tRWxlbWVudFxuXG4gICAgICBAXG5cblxuXG5cbiAgIHRpY2s6IC0+XG4gICAgICBAY3ViZS5yb3RhdGlvbi55ICs9IC4xXG4gICAgICBAcmVuZGVyZXIucmVuZGVyIEBzY2VuZSwgQGNhbWVyYVxuXG5cblxuXG4gICB1cGRhdGVDYW1lcmFBbmdsZTogKHgsIHkpIC0+XG4gICAgICBAY2FtZXJhLnBvc2l0aW9uLnggPSB4XG4gICAgICBAY2FtZXJhLnBvc2l0aW9uLnkgPSB5XG5cblxuXG5cbiAgIHNldHVwVGhyZWVKU1JlbmRlcmVyOiAtPlxuICAgICAgY2FtZXJhQXR0cmlidXRlcyA9XG4gICAgICAgICBhbmdsZTogNDVcbiAgICAgICAgIGFzcGVjdDogTWFwQ29uZmlnLkNBTlZBU19TSVpFIC8gTWFwQ29uZmlnLkNBTlZBU19TSVpFXG4gICAgICAgICBuZWFyOiAuMVxuICAgICAgICAgZmFyOiAxMDAwXG5cbiAgICAgICMgU2NlbmUgcGFyYW1ldGVyc1xuICAgICAgQHNjZW5lICAgID0gbmV3IFRIUkVFLlNjZW5lXG4gICAgICBAY2FtZXJhICAgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEgY2FtZXJhQXR0cmlidXRlcy5hbmdsZSwgY2FtZXJhQXR0cmlidXRlcy5hc3BlY3QsIGNhbWVyYUF0dHJpYnV0ZXMubmVhciwgY2FtZXJhQXR0cmlidXRlcy5mYXJcbiAgICAgIEByZW5kZXJlciA9IG5ldyBUSFJFRS5DYW52YXNSZW5kZXJlciBhbHBoYTogdHJ1ZVxuXG4gICAgICAjIE9iamVjdCBwYXJhbWV0ZXJzXG4gICAgICBAZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkgMiwgMzAsIDJcblxuICAgICAgZm9yIGkgaW4gWzAuLkBnZW9tZXRyeS5mYWNlcy5sZW5ndGggLSAxXSBieSArMlxuICAgICAgICAgaGV4ID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmXG4gICAgICAgICBAZ2VvbWV0cnkuZmFjZXNbaV0uY29sb3Iuc2V0SGV4IGhleFxuICAgICAgICAgQGdlb21ldHJ5LmZhY2VzW2kgKyAxXS5jb2xvci5zZXRIZXggaGV4XG5cblxuICAgICAgQG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsIHZlcnRleENvbG9yczogVEhSRUUuRmFjZUNvbG9ycywgb3ZlcmRyYXc6IDAuNVxuICAgICAgQGN1YmUgICAgID0gbmV3IFRIUkVFLk1lc2ggQGdlb21ldHJ5LCBAbWF0ZXJpYWxcblxuICAgICAgIyBVcGRhdGUgdmlld1xuICAgICAgQHJlbmRlcmVyLnNldENsZWFyQ29sb3IgMHgwMDAwMDAsIDBcbiAgICAgIEBjYW1lcmEucG9zaXRpb24ueiA9IDUwXG5cbiAgICAgIEBzY2VuZS5hZGQgQGN1YmVcblxuICAgICAgQGN1YmUucm90YXRpb24ueCA9IDIwXG4gICAgICBAY3ViZS5yb3RhdGlvbi55ID0gMjBcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gVGhyZWVTY2VuZSJdfQ==
