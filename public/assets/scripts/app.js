(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

/**
 * Map app configuration options
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.7.14
 */
var MapConfig;

MapConfig = {
  ID: 'damassi.i68ol38a',
  INIT: {
    location: [47.65180177401242, -122.34272003173828],
    zoom: 11
  }
};

module.exports = MapConfig;


},{}],2:[function(require,module,exports){

/**
 * Map Canvas application bootstrapper
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.7.14
 */
var MapCanvasApp, MapView;

MapView = require('./views/MapView.coffee');

MapCanvasApp = (function() {
  function MapCanvasApp() {
    new MapView;
  }

  return MapCanvasApp;

})();

$(function() {
  return new MapCanvasApp;
});


},{"./views/MapView.coffee":3}],3:[function(require,module,exports){

/**
 * MapBox map layer
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.7.14
 */
var MapConfig, MapView;

MapConfig = require('../config/MapConfig.coffee');

MapView = (function() {
  MapView.prototype.mapbox = null;

  MapView.prototype.mapLayer = null;

  MapView.prototype.$leafletPane = null;

  MapView.prototype.$canvas = null;

  function MapView(options) {
    this.mapbox = L.mapbox;
    this.mapLayer = this.mapbox.map('map', MapConfig.ID).setView(MapConfig.INIT.location, MapConfig.INIT.zoom).addControl(this.mapbox.geocoderControl(MapConfig.ID));
    this.insertCanvasLayer();
  }

  MapView.prototype.insertCanvasLayer = function() {
    var $canvas, $leafletPane;
    $leafletPane = $("#map > .leaflet-map-pane > .leaflet-objects-pane");
    $canvas = $('#canvas-layer');
    $canvas.prependTo($leafletPane);
    return $canvas.css('z-index', 5);
  };

  return MapView;

})();

module.exports = MapView;


},{"../config/MapConfig.coffee":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvVXNlcnMvY2hyaXMvU2l0ZXMvV0lOVFIvRXhwZXJpbWVudHMvY2FudmFzLW1hcC1leHBlcmltZW50L25vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvY2hyaXMvU2l0ZXMvV0lOVFIvRXhwZXJpbWVudHMvY2FudmFzLW1hcC1leHBlcmltZW50L3NyYy9zY3JpcHRzL2NvbmZpZy9NYXBDb25maWcuY29mZmVlIiwiL1VzZXJzL2NocmlzL1NpdGVzL1dJTlRSL0V4cGVyaW1lbnRzL2NhbnZhcy1tYXAtZXhwZXJpbWVudC9zcmMvc2NyaXB0cy9pbml0aWFsaXplLmNvZmZlZSIsIi9Vc2Vycy9jaHJpcy9TaXRlcy9XSU5UUi9FeHBlcmltZW50cy9jYW52YXMtbWFwLWV4cGVyaW1lbnQvc3JjL3NjcmlwdHMvdmlld3MvTWFwVmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUFBOzs7OztHQUFBO0FBQUEsSUFBQSxTQUFBOztBQUFBLFNBUUEsR0FNRztBQUFBLEVBQUEsRUFBQSxFQUFJLGtCQUFKO0FBQUEsRUFNQSxJQUFBLEVBQ0c7QUFBQSxJQUFBLFFBQUEsRUFBVSxDQUFDLGlCQUFELEVBQW9CLENBQUEsa0JBQXBCLENBQVY7QUFBQSxJQUNBLElBQUEsRUFBTSxFQUROO0dBUEg7Q0FkSCxDQUFBOztBQUFBLE1BMEJNLENBQUMsT0FBUCxHQUFpQixTQTFCakIsQ0FBQTs7OztBQ0FBO0FBQUE7Ozs7O0dBQUE7QUFBQSxJQUFBLHFCQUFBOztBQUFBLE9BT0EsR0FBVSxPQUFBLENBQVEsd0JBQVIsQ0FQVixDQUFBOztBQUFBO0FBZWdCLEVBQUEsc0JBQUEsR0FBQTtBQUNWLElBQUEsR0FBQSxDQUFBLE9BQUEsQ0FEVTtFQUFBLENBQWI7O3NCQUFBOztJQWZILENBQUE7O0FBQUEsQ0FtQkEsQ0FBRSxTQUFBLEdBQUE7U0FDQyxHQUFBLENBQUEsYUFERDtBQUFBLENBQUYsQ0FuQkEsQ0FBQTs7OztBQ0FBO0FBQUE7Ozs7O0dBQUE7QUFBQSxJQUFBLGtCQUFBOztBQUFBLFNBT0EsR0FBWSxPQUFBLENBQVEsNEJBQVIsQ0FQWixDQUFBOztBQUFBO0FBZ0JHLG9CQUFBLE1BQUEsR0FBUSxJQUFSLENBQUE7O0FBQUEsb0JBTUEsUUFBQSxHQUFVLElBTlYsQ0FBQTs7QUFBQSxvQkFZQSxZQUFBLEdBQWMsSUFaZCxDQUFBOztBQUFBLG9CQWtCQSxPQUFBLEdBQVMsSUFsQlQsQ0FBQTs7QUFzQmEsRUFBQSxpQkFBQyxPQUFELEdBQUE7QUFDVixJQUFBLElBQUMsQ0FBQSxNQUFELEdBQVUsQ0FBQyxDQUFDLE1BQVosQ0FBQTtBQUFBLElBRUEsSUFBQyxDQUFBLFFBQUQsR0FBWSxJQUFDLENBQUEsTUFBTSxDQUFDLEdBQVIsQ0FBWSxLQUFaLEVBQW1CLFNBQVMsQ0FBQyxFQUE3QixDQUNULENBQUMsT0FEUSxDQUNHLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFEbEIsRUFDNEIsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUQzQyxDQUVULENBQUMsVUFGUSxDQUVHLElBQUMsQ0FBQSxNQUFNLENBQUMsZUFBUixDQUF3QixTQUFTLENBQUMsRUFBbEMsQ0FGSCxDQUZaLENBQUE7QUFBQSxJQU1BLElBQUMsQ0FBQSxpQkFBRCxDQUFBLENBTkEsQ0FEVTtFQUFBLENBdEJiOztBQUFBLG9CQWlDQSxpQkFBQSxHQUFtQixTQUFBLEdBQUE7QUFDaEIsUUFBQSxxQkFBQTtBQUFBLElBQUEsWUFBQSxHQUFlLENBQUEsQ0FBRSxrREFBRixDQUFmLENBQUE7QUFBQSxJQUNBLE9BQUEsR0FBZSxDQUFBLENBQUUsZUFBRixDQURmLENBQUE7QUFBQSxJQUdBLE9BQU8sQ0FBQyxTQUFSLENBQWtCLFlBQWxCLENBSEEsQ0FBQTtXQUlBLE9BQU8sQ0FBQyxHQUFSLENBQVksU0FBWixFQUF1QixDQUF2QixFQUxnQjtFQUFBLENBakNuQixDQUFBOztpQkFBQTs7SUFoQkgsQ0FBQTs7QUFBQSxNQXlETSxDQUFDLE9BQVAsR0FBaUIsT0F6RGpCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIiMjIypcbiAqIE1hcCBhcHAgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gKlxuICogQGF1dGhvciBDaHJpc3RvcGhlciBQYXBwYXMgPGNocmlzQHdpbnRyLnVzPlxuICogQGRhdGUgICA1LjcuMTRcbiMjI1xuXG5cbk1hcENvbmZpZyA9XG5cblxuICAgIyBVbmlxdWUgaWRlbnRpZmllciBmb3IgTWFwQm94IGFwcFxuICAgIyBAdHlwZSB7U3RyaW5nfVxuXG4gICBJRDogJ2RhbWFzc2kuaTY4b2wzOGEnXG5cblxuICAgIyBNYXAgbGFuZHMgb24gU2VhdHRsZSBkdXJpbmcgaW5pdGlhbGl6YXRpb25cbiAgICMgQHR5cGUge0FycmF5fVxuXG4gICBJTklUOlxuICAgICAgbG9jYXRpb246IFs0Ny42NTE4MDE3NzQwMTI0MiwgLTEyMi4zNDI3MjAwMzE3MzgyOF1cbiAgICAgIHpvb206IDExXG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENvbmZpZyIsIiMjIypcbiAqIE1hcCBDYW52YXMgYXBwbGljYXRpb24gYm9vdHN0cmFwcGVyXG4gKlxuICogQGF1dGhvciBDaHJpc3RvcGhlciBQYXBwYXMgPGNocmlzQHdpbnRyLnVzPlxuICogQGRhdGUgICA1LjcuMTRcbiMjI1xuXG5NYXBWaWV3ID0gcmVxdWlyZSAnLi92aWV3cy9NYXBWaWV3LmNvZmZlZSdcblxuXG5jbGFzcyBNYXBDYW52YXNBcHBcblxuICAgIyBLaWNrIG9mZiB0aGUgYXBwbGljYXRpb24gYnkgaW5zdGFudGlhdGluZ1xuICAgIyBuZWNjZXNzYXJ5IHZpZXdzXG5cbiAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgbmV3IE1hcFZpZXdcblxuXG4kIC0+XG4gICBuZXcgTWFwQ2FudmFzQXBwXG4iLCIjIyMqXG4gKiBNYXBCb3ggbWFwIGxheWVyXG4gKlxuICogQGF1dGhvciBDaHJpc3RvcGhlciBQYXBwYXMgPGNocmlzQHdpbnRyLnVzPlxuICogQGRhdGUgICA1LjcuMTRcbiMjI1xuXG5NYXBDb25maWcgPSByZXF1aXJlICcuLi9jb25maWcvTWFwQ29uZmlnLmNvZmZlZSdcblxuXG5jbGFzcyBNYXBWaWV3XG5cblxuICAgIyBQcm94eSBMLm1hcGJveCBuYW1lc3BhY2UgZm9yIGVhc3kgYWNjZXNzXG4gICAjIEB0eXBlIHtMLm1hcGJveH1cblxuICAgbWFwYm94OiBudWxsXG5cblxuICAgIyBNYXBCb3ggbWFwIGxheWVyXG4gICAjIEB0eXBlIHtMLk1hcH1cblxuICAgbWFwTGF5ZXI6IG51bGxcblxuXG4gICAjIFJlZiB0byB0aGUgTGVhZmxldCBsYXllciB0byBpbnNlcnQgbWFwIGJlZm9yZVxuICAgIyBAdHlwZSB7JH1cblxuICAgJGxlYWZsZXRQYW5lOiBudWxsXG5cblxuICAgIyBSZWYgdG8gdGhlIGNhbnZhcyBET00gZWxlbWVudFxuICAgIyBAdHlwZSB7TC5NYXB9XG5cbiAgICRjYW52YXM6IG51bGxcblxuXG5cbiAgIGNvbnN0cnVjdG9yOiAob3B0aW9ucykgLT5cbiAgICAgIEBtYXBib3ggPSBMLm1hcGJveFxuXG4gICAgICBAbWFwTGF5ZXIgPSBAbWFwYm94Lm1hcCAnbWFwJywgTWFwQ29uZmlnLklEXG4gICAgICAgICAuc2V0VmlldyAgICBNYXBDb25maWcuSU5JVC5sb2NhdGlvbiwgTWFwQ29uZmlnLklOSVQuem9vbVxuICAgICAgICAgLmFkZENvbnRyb2wgQG1hcGJveC5nZW9jb2RlckNvbnRyb2wgTWFwQ29uZmlnLklEXG5cbiAgICAgIEBpbnNlcnRDYW52YXNMYXllcigpXG5cblxuXG4gICBpbnNlcnRDYW52YXNMYXllcjogLT5cbiAgICAgICRsZWFmbGV0UGFuZSA9ICQgXCIjbWFwID4gLmxlYWZsZXQtbWFwLXBhbmUgPiAubGVhZmxldC1vYmplY3RzLXBhbmVcIlxuICAgICAgJGNhbnZhcyAgICAgID0gJCAnI2NhbnZhcy1sYXllcidcblxuICAgICAgJGNhbnZhcy5wcmVwZW5kVG8gJGxlYWZsZXRQYW5lXG4gICAgICAkY2FudmFzLmNzcyAnei1pbmRleCcsIDVcblxuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcFZpZXciXX0=
